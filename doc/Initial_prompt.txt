# Claude 3.7 Sonnet Initial prompt

Amazon Bedrock + MCP を活用したAIトレーディングエージェント開発プロンプト
以下は、Amazon BedrockとMulti-agent Conversational Protocol（MCP）を活用して、現在のシステムトレードアプリケーションをAIエージェントベースにリメイクするためのプロンプトです。新しいスレッドでこのプロンプトを使用して、ゼロベースで開発を始めてください。
プロンプト: Amazon BedrockとMCPを活用した高度な株式トレーディングシステムの構築
私は立花証券のAPIを利用して、日本株市場のためのAIエージェントベースのシステムトレードアプリケーションを開発したいと考えています。Amazon BedrockとMCP（Multi-agent Conversational Protocol）を活用して、以下の要件を満たすシステムの設計と実装をお願いします。
システム要件
1. マルチエージェントアーキテクチャ
   * 各役割に特化した専門AIエージェントを複数配置
   * エージェント間で協調して意思決定を行うMCPフレームワークの実装
   * 中央調整エージェントによる全体プロセスの管理
2. データ収集と分析
   * 株価データ収集エージェント（Yahoo Finance、日経など）
   * ニュース分析エージェント（世界情勢、日本の社会情勢）
   * 政策分析エージェント（総理大臣演説、政府発表など）
   * テクニカル分析エージェント（チャートパターン、指標分析）
3. 意思決定プロセス
   * 複数データソースの統合分析
   * スコアリングと売買シグナル生成
   * リスク管理と資金配分の最適化
   * 実行タイミングの決定（午前購入、午後売却）
4. 取引実行
   * 立花証券APIとの安全な連携
   * 注文管理と執行確認
   * エラーハンドリングと再試行ロジック
5. 学習と最適化
   * 過去の取引結果からの学習
   * 戦略パラメータの継続的最適化
   * マーケット状況に応じた適応的戦略調整
技術スタック
1. AI/ML基盤
   * Amazon Bedrock（Claude、Titan、その他のモデル活用）
   * LangChain/LlamaIndex for RAGとエージェントオーケストレーション
   * MCPプロトコルによるエージェント間通信
2. データ処理
   * Amazon S3による大規模データストレージ
   * Amazon RDSまたはDynamoDBによるデータベース
   * データの前処理・変換パイプライン
3. インフラストラクチャ
   * AWSサーバーレスアーキテクチャ（Lambda、Step Functions）
   * コンテナ化（ECSまたはEKSでの運用）
   * インフラストラクチャのIaC（CDK、CloudFormation）
4. 監視と分析
   * CloudWatchによるシステム監視
   * 取引結果のダッシュボード
   * パフォーマンス指標の可視化
具体的な実装方針
1. エージェント設計
   * 各エージェントの役割と責任範囲の明確化
   * エージェント間のコミュニケーションプロトコル定義
   * 意思決定ワークフローの設計
2. データフロー
   * リアルタイムデータと履歴データの処理方法
   * データの標準化と前処理方法
   * 効率的なデータアクセスパターン
3. 取引ロジック
   * Bedrockモデルを活用した高度な市場分析
   * 複数の分析視点の統合アプローチ
   * リスク考慮型の投資判断フレームワーク
4. セキュリティと安全性
   * API資格情報の安全な管理
   * 取引リスク制限とバリデーション
   * フォールバックメカニズム
5. スケーラビリティ
   * 複数銘柄・市場への拡張方法
   * 処理能力の動的スケーリング
   * 並列処理アーキテクチャ
期待される成果物
1. 詳細なシステム設計（アーキテクチャ図）
2. 各コンポーネントの実装コード
3. デプロイメントスクリプトとIaCコード
4. エージェント間の対話プロトコル仕様
5. シミュレーションモードを含むテスト環境
6. パフォーマンス分析ダッシュボード
7. 運用ガイドとトラブルシューティング手順
開発アプローチ
まずは全体的なシステムアーキテクチャと、中核となるAIエージェントの設計から始めたいと思います。特に、マルチエージェントアーキテクチャの設計と、Amazon Bedrockの効果的な活用方法に焦点を当ててください。
その後、各エージェントの詳細な機能とコードの実装を進め、最終的には完全なシステムとして統合したいと考えています。
このプロンプトを新しいスレッドで使用することで、Amazon BedrockとMCPに特化した最新のAIエージェントベースのトレーディングシステムの設計と実装を進めることができます。新しいシステムでは、従来のルールベースのアプローチから、より洗練されたAIエージェント間の協調による意思決定モデルへと進化させることができるでしょう。